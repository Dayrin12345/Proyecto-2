/*
Universidad Del Valle de Guatemala
Facultad de Ingeniería
Departamento de Electrónica, Mecatrónica y Biomédica
Electrónica Digital 2
Dayrin Rivas 22831
*/

#include <Arduino.h>
#include <ESP32SPISlave.h>
#include <Wire.h>

#define I2C_DEV_ADDR 0x55

ESP32SPISlave slave;

// Pines de los LEDs
#define LED1 13
#define LED2 27
#define LED3 26
#define POT 34

void encender_led(int numero, int tiempo);

static constexpr uint32_t BUFFER_SIZE {32};
uint8_t spi_slave_rx_buf[BUFFER_SIZE];  // Buffer para recibir datos por SPI

//Funciones para I2C
void onRequest();
void onReceive (int len);

void setup() {
  Serial.begin(115200);
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);

  // Configuración SPI esclavo
  slave.setDataMode(SPI_MODE0);  // Modo SPI por defecto: SPI_MODE0
  slave.setQueueSize(1);  // Tamaño de la cola de datos
  slave.begin(VSPI);

  memset(spi_slave_rx_buf, 0, BUFFER_SIZE);  // Inicializar el buffer

  //Configuración I2C
  Serial.setDebugOutput(true);
  Wire.onReceive(onReceive);
  Wire.onRequest(onRequest);
  Wire.begin(uint8_t)I2C_DEV_ADDR;



}

void loop() {
  // Esperar recibir datos desde el maestro (STM32)
  slave.wait(spi_slave_rx_buf, nullptr, BUFFER_SIZE);

  // Mostrar la cadena recibida
  String comando = String((char*)spi_slave_rx_buf);
  Serial.print("Comando recibido: ");
  Serial.println(comando);

  // Procesar la cadena recibida
  int ledNumero = 0;
  int tiempo = 0;
  sscanf(comando.c_str(), "%d,%d", &ledNumero, &tiempo);

  // Validar y encender el LED correspondiente
  if ((ledNumero >= 1 && ledNumero <= 3) && tiempo > 0) {
    encender_led(ledNumero, tiempo);
  } else {
    Serial.println("ERROR: Comando inválido.");
  }

  // Limpiar el buffer para la próxima recepción
  memset(spi_slave_rx_buf, 0, BUFFER_SIZE);

  int valor = analogRead(POT);
  float voltaje = valor * (3.3 / 4095);
  Serial.printf("Voltaje: %.2fV\n", voltaje);
}

// Función para encender un LED durante el tiempo especificado
void encender_led(int numero, int tiempo) {
  int ledPin;
  switch (numero) {
    case 1: ledPin = LED1; break;
    case 2: ledPin = LED2; break;
    case 3: ledPin = LED3; break;
    default: return;  // Si el LED no es válido, salir
  }

  digitalWrite(ledPin, HIGH);  // Encender el LED
  delay(tiempo);  // Mantener el LED encendido durante el tiempo especificado
  digitalWrite(ledPin, LOW);  // Apagar el LED
}

// Función para cuando el maestro solicita datos
void onRequest() {
  unsigned int potValue = analogRead(POT);  // Leer el valor del potenciómetro
  int voltaje = map(potValue, 0, 4095, 0, 400);
  Wire.print(voltaje);  // Enviar el valor del potenciómetro al maestro

  Serial.println("Valor del potenciómetro enviado al maestro: ");
  Serial.println(voltaje);
}

void onReceive(int len) {

  Serial.printf("onReceive[%d]:",len);
  while(Wire.available()){
    uint8_t incomingByte=Wire.read();
    Serial.write(incomingByte);
  }
  Serial.println();
}

